{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MODES","Ranger","val","setVal","children","onClick","_val","ControlButton","App","useState","mode","setMode","seconds","setSeconds","cycles","setCycles","workPeriod","setWorkPeriod","restPeriod","setRestPeriod","useEffect","timer","setTimeout","clearTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oLAEMA,EACK,UADLA,EAEK,UAFLA,EAGI,SAMJC,EAAS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAC7B,OACE,oCACE,kBAAC,EAAD,CAAeC,QAAS,kBAAMF,GAAO,SAACG,GAAD,OAAUA,EAAO,OAAtD,KAGCJ,EAJH,IAISE,EACP,kBAAC,EAAD,CAAeC,QAAS,kBAAMF,GAAO,SAACG,GAAD,OAAUA,EAAO,OAAtD,OAOAC,EAAgB,SAAC,GAA2B,IAAzBH,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QACjC,OAAO,4BAAQA,QAASA,GAAUD,IAGvBI,EAAM,WAAO,IAAD,EACCC,mBAAST,GADV,mBAChBU,EADgB,KACVC,EADU,OAEOF,mBAtBX,GAoBI,mBAEhBG,EAFgB,KAEPC,EAFO,OAGKJ,mBAAS,GAHd,mBAGhBK,EAHgB,KAGRC,EAHQ,OAIaN,mBAAS,GAJtB,mBAIhBO,EAJgB,KAIJC,EAJI,OAKaR,mBAAS,GALtB,mBAKhBS,EALgB,KAKJC,EALI,KAmBvB,OAZAC,qBAAU,WACR,GAAIV,IAASV,EAAb,CAIA,IAAMqB,EAAQC,YAAW,WACvBT,GAAW,SAACD,GAAD,OAAaA,EAAU,OAlCzB,KAqCX,OAAO,kBAAMW,aAAaF,OACzB,CAACT,EAASF,IAETA,IAASV,EAET,oCACE,kBAAC,EAAD,CAAQE,IAAKY,EAAQX,OAAQY,GAA7B,UAGA,kBAAC,EAAD,CAAQb,IAAKc,EAAYb,OAAQc,GAAjC,eAGA,kBAAC,EAAD,CAAQf,IAAKgB,EAAYf,OAAQgB,GAAjC,eAGA,kBAAC,EAAD,CAAed,QAAS,kBAAMM,EAAQX,KAAtC,UAOFU,IAASV,EAET,oCACE,kBAAC,EAAD,CAAeK,QAAS,kBAAMM,EAAQX,KAAtC,SAGA,kBAAC,EAAD,CACEK,QAAS,kBAAMM,EAAQX,IAAkBa,EAjE9B,KAgEb,SAUJ,oCACE,6BACE,wCAAcD,GACd,kBAAC,EAAD,CAAeP,QAAS,kBAAMM,EAAQX,KAAtC,YC1EYwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e3727d95.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst MODES = {\n  RUNNING: \"Running\",\n  STOPPED: \"Stopped\",\n  PAUSED: \"Paused\",\n};\n\nconst PERIOD = 1000;\nconst INITIAL_TIME = 0;\n\nconst Ranger = ({ val, setVal, children }) => {\n  return (\n    <>\n      <ControlButton onClick={() => setVal((_val) => _val + 1)}>\n        +\n      </ControlButton>\n      {val} {children}\n      <ControlButton onClick={() => setVal((_val) => _val - 1)}>\n        -\n      </ControlButton>\n    </>\n  );\n};\n\nconst ControlButton = ({ children, onClick }) => {\n  return <button onClick={onClick}>{children}</button>;\n};\n\nexport const App = () => {\n  const [mode, setMode] = useState(MODES.STOPPED);\n  const [seconds, setSeconds] = useState(INITIAL_TIME);\n  const [cycles, setCycles] = useState(0);\n  const [workPeriod, setWorkPeriod] = useState(0);\n  const [restPeriod, setRestPeriod] = useState(0);\n\n  useEffect(() => {\n    if (mode !== MODES.RUNNING) {\n      return;\n    }\n\n    const timer = setTimeout(() => {\n      setSeconds((seconds) => seconds + 1);\n    }, PERIOD);\n\n    return () => clearTimeout(timer);\n  }, [seconds, mode]);\n\n  if (mode === MODES.STOPPED) {\n    return (\n      <>\n        <Ranger val={cycles} setVal={setCycles}>\n          Cycles\n        </Ranger>\n        <Ranger val={workPeriod} setVal={setWorkPeriod}>\n          Work Period\n        </Ranger>\n        <Ranger val={restPeriod} setVal={setRestPeriod}>\n          Rest Period\n        </Ranger>\n        <ControlButton onClick={() => setMode(MODES.RUNNING)}>\n          Start\n        </ControlButton>\n      </>\n    );\n  }\n\n  if (mode === MODES.PAUSED) {\n    return (\n      <>\n        <ControlButton onClick={() => setMode(MODES.RUNNING)}>\n          Start\n        </ControlButton>\n        <ControlButton\n          onClick={() => setMode(MODES.STOPPED) || setSeconds(INITIAL_TIME)}\n        >\n          Stop\n        </ControlButton>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <div>\n        <h1>RUNNING: {seconds}</h1>\n        <ControlButton onClick={() => setMode(MODES.PAUSED)}>\n          Pause\n        </ControlButton>\n      </div>\n    </>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}